services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: speech_memorization_db
    environment:
      POSTGRES_DB: ${DB_NAME:-speech_memorization}
      POSTGRES_USER: ${DB_USER:-speech_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-speech_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-speech_user} -d ${DB_NAME:-speech_memorization}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: speech_memorization_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-base}
    container_name: speech_memorization_web
    environment:
      # Django settings
      DEBUG: ${DEBUG:-False}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-change-in-production}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      
      # Database configuration
      DB_ENGINE: postgresql
      DB_NAME: ${DB_NAME:-speech_memorization}
      DB_USER: ${DB_USER:-speech_user}
      DB_PASSWORD: ${DB_PASSWORD:-speech_password}
      DB_HOST: postgres
      DB_PORT: 5432
      
      # Redis configuration
      REDIS_URL: redis://redis:6379/0
      CACHE_URL: redis://redis:6379/1
      
      # OpenAI configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Application settings
      BASE_DOMAIN: ${BASE_DOMAIN:-localhost}
      PORT: ${PORT:-8000}
      
      # Production settings
      SECURE_SSL_REDIRECT: ${SECURE_SSL_REDIRECT:-False}
      SECURE_HSTS_SECONDS: ${SECURE_HSTS_SECONDS:-0}
      
      # Superuser creation (optional)
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME:-admin}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD:-}
      
      # Initial data loading
      LOAD_INITIAL_DATA: ${LOAD_INITIAL_DATA:-false}
    volumes:
      # Application code (for development)
      - .:/app:${MOUNT_MODE:-ro}
      # Persistent data
      - media_files:/app/media
      - static_files:/app/staticfiles
      - log_files:/app/logs
      # Audio processing temp directory
      - audio_temp:/tmp/audio_processing
    ports:
      - "${PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--deploy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: ["web"]
    env_file:
      - .env

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: speech_memorization_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_files:/app/staticfiles:ro
      - media_files:/app/media:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: unless-stopped
    profiles:
      - production

  # Background task processor (for future features)
  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-base}
    container_name: speech_memorization_celery
    command: ["celery"]
    environment:
      # Inherit same environment as web service
      DEBUG: ${DEBUG:-False}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-change-in-production}
      DB_ENGINE: postgresql
      DB_NAME: ${DB_NAME:-speech_memorization}
      DB_USER: ${DB_USER:-speech_user}
      DB_PASSWORD: ${DB_PASSWORD:-speech_password}
      DB_HOST: postgres
      DB_PORT: 5432
      REDIS_URL: redis://redis:6379/0
      CACHE_URL: redis://redis:6379/1
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # Celery specific
      CELERY_BROKER_URL: redis://redis:6379/2
      CELERY_RESULT_BACKEND: redis://redis:6379/3
    volumes:
      - .:/app:${MOUNT_MODE:-ro}
      - log_files:/app/logs
      - audio_temp:/tmp/audio_processing
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - background-tasks
    env_file:
      - .env

  # Celery Beat Scheduler (for periodic tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-base}
    container_name: speech_memorization_celery_beat
    command: ["celery-beat"]
    environment:
      # Same as celery worker
      DEBUG: ${DEBUG:-False}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-change-in-production}
      DB_ENGINE: postgresql
      DB_NAME: ${DB_NAME:-speech_memorization}
      DB_USER: ${DB_USER:-speech_user}
      DB_PASSWORD: ${DB_PASSWORD:-speech_password}
      DB_HOST: postgres
      DB_PORT: 5432
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/2
      CELERY_RESULT_BACKEND: redis://redis:6379/3
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - .:/app:${MOUNT_MODE:-ro}
      - log_files:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - background-tasks
    env_file:
      - .env

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
  log_files:
    driver: local
  audio_temp:
    driver: local

networks:
  default:
    name: speech_memorization_network
    driver: bridge