FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libsndfile1-dev \
    libsndfile1 \
    portaudio19-dev \
    libasound2-dev \
    pulseaudio \
    ffmpeg \
    libssl-dev \
    libffi-dev \
    zlib1g-dev \
    libpq-dev \
    git \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create application user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Install Python dependencies
COPY requirements.txt requirements_prod.txt ./
RUN pip install --upgrade pip setuptools wheel && \
    pip install -r requirements.txt && \
    pip install -r requirements_prod.txt

# Copy application code
COPY . .

# Create necessary directories and set permissions
RUN mkdir -p logs media static staticfiles config backups && \
    chown -R appuser:appuser /app

# Collect static files
RUN python manage.py collectstatic --noinput --settings=speech_memorization.settings_production

# Production target
FROM base as production

# Install additional production dependencies
RUN pip install gunicorn whitenoise[brotli] sentry-sdk

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Production command
CMD ["gunicorn", "speech_memorization.wsgi:application", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "4", \
     "--worker-class", "sync", \
     "--worker-connections", "1000", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--timeout", "120", \
     "--keep-alive", "5", \
     "--access-logfile", "/app/logs/access.log", \
     "--error-logfile", "/app/logs/error.log", \
     "--log-level", "info"]

# Development target (for local development)
FROM base as development

# Install development dependencies
RUN pip install django-debug-toolbar ipython

# Switch to non-root user
USER appuser

# Development command
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]